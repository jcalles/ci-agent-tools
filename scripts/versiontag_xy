#!/usr/bin/env bash

set -e

# Initializes flags and other variables

action=''           # the sub-command to execute
dry=false           # Flag to run with executing commands
force=false         # Flag to run without asking for confirmation
versionFile=false   # Flag to generate the .semver file
last=''             # Will contain the last version tag found

## Runs a command with arguments, taking care of the --dry flag
function execute {
    cmd=("$@")
    if [[ true == "$dry" ]];then
        printf '%s \n' "DRY -no changes- ${cmd[*]}"
        return
    fi

    printf '%s\n' "Executing ${cmd[*]} ..."

    "${cmd[@]}" 2>&1
}

# Asks for confirmation returns yes|no
function confirm() {
    read -p "$1 ([y]es or [N]o): "
    case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
        y|yes) echo "yes" ;;
        *)     echo "no" ;;
    esac
}

# Generates the .semver file

function updateSemverFile() {
    if [[ true == "$dry" || false == "$versionFile" ]]; then
        return 0
    fi
    
    :> .semver
    exec 3<> .semver

    echo "---" >&2
    echo ":major: $major" >&2
    echo ":minor: $minor" >&2
    echo >&2
    
    echo ":notes: $msg" >&2
    echo >&2
    exec 2>&-
}

function pushSemver() {
    execute git add .semver
    execute git commit -m "Update .semver file"
    execute git push
}

# Removes last tag both local and remote

function removeTag() {
    execute git tag -d "$last"
    execute git push origin :"$last"
    updateSemverFile
}

# Shows full help for the script

function showHelp() {
cat <<'TXT'
versiontag
==========

Automates version tag creation.

Commands:   patch|minor|major 'Tag message'
            remove
            current

Options:    -d|--dry:     don't change things
            -f|--force:   don't ask for confirmation
            -h|--help:    show this help
            -m|--message: annotate tag with a message
            -s|--semver:  generate .semver file

Examples:
---------

Show current version:  versiontag current
Minor version:         versiontag minor --message'Add Customer filter by email'
Major version:         versiontag major -m 'Blog module'
Remove last version:   versiontag remove
Run without changes:   versiontag --dry remove

TXT
}

# Shows the result of the command

function showSuccess() {
    echo
    echo "Tag v$major.$minor.$patch was created in local repository."
    echo
    echo "Push it:"
    echo
    echo "    git push origin v$major.$minor.$patch"
    echo
    echo "Delete tag:"
    echo
    echo "    git tag -d v$major.$minor.$patch"
    echo
}

# Show current version

function showCurrentVersion() {
    if [[ true == "$versionFile" ]]; then
        updateSemverFile
        printf '.semver file generated for: %s\n' "$last"
        return
    fi
    printf 'Current version: %s\n' "$last"
}

# Get the last tag and breaks into parts

function getLastTag() {
    lasttag=`git tag | sort -r | grep "^v[0-9]*\.[0-9]" | head -1 2> /dev/null` || true

    if [[ -z "$lasttag" ]]; then
        lasttag='v1.0'
    fi

    lasttag=${lasttag:1}
    
    parts=(${lasttag//./ })
    
    major=${parts[0]}
    minor=${parts[1]}
    

    #last="v$major.$minor.$patch"
    last="v$major.$minor"
}


##########################################################################
# Process command options
##########################################################################
for ((i = 1; i <= $#; i++ )); do
    case ${!i} in
        "-d"|"--dry")
            dry=true
            ;;
        "-f"|"--force")
            force=true
            ;;
        "-h"|"--help")
            showHelp
            exit 0
            ;;
        "-m"|"--message")
            let i++
            msg="${!i}"
            ;;
        "-s"|"--semver")
            versionFile=true
            ;;
        #"patch"|"minor"|"major")
        "minor"|"major")
            action="${!i}"
            ;;
        "current")
            action='current'
            ;;
        "patch")
            action='patch'
            ;;
        "init")
            action='init'
            ;;
        "remove")
            if [[ "yes" == $(confirm "Do you want to remove $last?") ]]; then
                removeTag
            fi
            exit 0
            ;;
        "help")
            showHelp
            exit 0
            ;;
        *)
            echo "${!i} option is not valid"
            exit 1
            ;;
    esac
done


patch() {
   # set -x
CURRENTTAG=$(git tag|grep -ohP '^(v[0-9].[0-9]$)'|sort -nr|head -n1)

if   [[ ! -z "${CURRENTTAG}" ]] && [[ "${CURRENTTAG}" =~ ^(v[0-9].[0-9]$) ]]
then 


        git push origin :refs/tags/"${CURRENTTAG}"
        git tag -d "${CURRENTTAG}"
        
       # git push -d origin "${CURRENTTAG}"
        git tag "${CURRENTTAG}"
        git push  origin "${CURRENTTAG}"
        git fetch --tags -f
fi
 

exit 0
}

init() {
#set -x
    CURRENTTAG=`git tag | sort -r | grep "^v[0-9]*\.[0-9]" | head -1 2> /dev/null` || true

	if   [[ -z "${CURRENTTAG}" ]]
then 

    	git pull
    	git tag 'v1.0'
    	git tag 'v1.0.0'
    	git push  origin "v1.0"
    	git push  origin "v1.0.0"
    	git fetch --tags -f

else
echo "TAG ALREADY EXISTS: ${CURRENTTAG}"	
fi



exit 0



}

# Get last tag from repo and process the desired command

getLastTag

case "$action" in
    'current')
        showCurrentVersion
        exit 0;;
    'minor')
        minor=$((minor + 1))
        patch=0
        ;;
    'major')
        major=$((major + 1))
        minor=0
        patch=0
        ;;
    'patch')
        patch
        ;;
    'init')
        init
        ;;
    *)
        echo "No mode selected"
        exit 0
esac

# Shows information

printf "Current version : %s\n" "$last"
printf "New tag         : %s.%s\n\n" "v$major" "$minor"

if [[ false == "$force" &&  "no" == $(confirm "Do you agree?") ]]; then
    printf '\n%s' "No tag was created"
    exit 0;
fi

if [[ -z $msg ]]; then
    execute git tag "v$major.$minor"
else
    printf 'Message         : %s\n\n' "$msg"
    execute git tag -a "v$major.$minor" -m "$msg ($action version)"
fi

updateSemverFile

if [[ false == "$force" &&  "no" == $(confirm "Do you want to push this tag right now?") ]]; then
    printf '\n%s' "No tag was pushed"
    exit 0;
fi
# case $option in
#     patch)
#     patch
#     ;;
#  esac   

execute git push origin "v$major.$minor"

exit 0
